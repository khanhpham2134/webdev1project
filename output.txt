
> server@1.0.0 test
> mocha --require test/setup.test.js --ignore 'test/8.4/**/*.js' --ignore 'test/8.5/**/*.js' --ignore 'test/8.6/**/*.js' --ignore 'test/9.2/**/*.js' --ignore 'test/9.6/**/*.js' --ignore 'test/10.2/**/*.js'



  Auth
    getCurrentUser()
      ✓ should return null when "Authorization" header is missing
      ✓ should return null when "Authorization" header is empty
      ✓ should return null when "Authorization" type is not "Basic"
      ✓ should return null when user does not exist
      ✓ should return null when password is incorrect (113ms)
      ✓ should return user object when credentials are correct (114ms)

  Products Controller
    getAllProducts()
      ✓ should respond with JSON

  Users Controller
    getAllUsers()
      ✓ should respond with JSON
    viewUser()
      ✓ should respond with "404 Not Found" if user with given userId does not exist
      ✓ should respond with JSON
    updateUser()
      ✓ should respond with "404 Not Found" if user with given userId does not exist
      ✓ should update only the role of the user with userId
      ✓ should respond with "400 Bad Request" when userId === currentUser.id
      ✓ should respond with "400 Bad Request" when role is missing
      ✓ should respond with "400 Bad Request" when role is not valid
    deleteUser()
      ✓ should respond with "404 Not Found" if user with given userId does not exist
      ✓ should respond with "400 Bad Request" when userId === currentUser.id
      ✓ should delete existing user with userId
      ✓ should return the deleted user
    registerUser()
      ✓ should respond with "400 Bad Request" when email is not valid
      ✓ should respond with "400 Bad Request" when email is already in use
      ✓ should respond with "400 Bad Request" when name is missing
      ✓ should respond with "400 Bad Request" when password is missing
      ✓ should respond with "400 Bad Request" when password is too short
      ✓ should respond with "201 Created" when registration is successful (116ms)
      ✓ should set user role to "customer" when registration is successful (114ms)
      ✓ should return the created user as JSON (114ms)

  getDbUrl()
    ✓ must return default database URL if DBURL is not defined
    ✓ must return DBURL defined in environment variable

  .env
    1) must define DBURL

  User Model
    Schema validation
      ✓ must define "name" (113ms)
      ✓ must trim spaces from "name" (111ms)
      ✓ must not allow "name" to have only spaces (111ms)
      ✓ must require "name" to be at least one character long (111ms)
      ✓ must not allow "name" to be longer than 50 characters (111ms)
      ✓ must require "email" (111ms)
      ✓ must require "email" to be valid email address (111ms)
      ✓ must require "password"
      ✓ must not allow empty "password"
      ✓ must require password to be at least 10 characters long (112ms)
      ✓ must hash password (111ms)
      ✓ must hash "password" when set to a new value (221ms)
      ✓ has an optional "role" (111ms)
      ✓ must set default value of "role" to customer (111ms)
      ✓ must allow any known "role" (222ms)
      ✓ must trim "role" (110ms)
      ✓ must cast "role" to lowercase (110ms)
      ✓ must not allow unknown "role" (111ms)
    checkPassword()
      ✓ must detect correct "password" (222ms)
      ✓ must detect a false "password" (232ms)

  Controllers
    Products
      async getAllProducts(response)
        ✓ should get all products
    Users
      initialize the class
        ✓ should init the class
      Test something
        ✓ should do something
      Test something2
        ✓ should do something2
      Test something3
        ✓ should do something3
      Test something4
        ✓ should do something4
      async getAllUsers(response)
        ✓ should get all users
      async deleteUser(response, userId, currentUser)
        ✓ should delete user
      async updateUser(response, userId, currentUser, userData)
        ✓ should update user
      async viewUser(response, userId, currentUser)
        ✓ should view user

  Routes
    handleRequest()
      General Server Functionality
        ✓ should respond with "404 Not Found" to an unknown URI
        ✓ should respond with HTML file when "/register.html" is requested
        ✓ should respond with "405 Method Not Allowed" to an unsupported method
        ✓ should respond with "204 No Content" to an OPTIONS request
        ✓ should respond with correct Allow headers to an OPTIONS request
      Registration: POST /api/register
        ✓ should respond with "406 Not Acceptable" when Accept header is missing
        ✓ should respond with "406 Not Acceptable" when client does not accept JSON
        ✓ should respond with "400 Bad Request" when request body is not valid JSON
        ✓ should respond with "400 Bad Request" when email is missing
        ✓ should respond with "400 Bad Request" when email is already in use
        ✓ should respond with "400 Bad Request" when name is missing
        ✓ should respond with "400 Bad Request" when password is missing
        ✓ should respond with "201 Created" when registration is successful (120ms)
        ✓ should set user role to "customer" when registration is successful (115ms)
      Viewing all users: GET /api/users
        ✓ should respond with "406 Not Acceptable" when Accept header is missing
        ✓ should respond with "406 Not Acceptable" when client does not accept JSON
        ✓ should respond with "401 Unauthorized" when Authorization header is missing
        ✓ should respond with Basic Auth Challenge when Authorization header is missing
        ✓ should respond with Basic Auth Challenge when Authorization header is empty
        ✓ should respond with Basic Auth Challenge when Authorization header is not properly encoded
        ✓ should respond with Basic Auth Challenge when Authorization credentials are incorrect (113ms)
        ✓ should respond with "403 Forbidden" when customer credentials are received (112ms)
        ✓ should respond with JSON when admin credentials are received (114ms)
      Viewing a single user: GET /api/users/{id}
        ✓ should respond with "401 Unauthorized" when Authorization header is missing
        ✓ should respond with Basic Auth Challenge when Authorization header is missing
        ✓ should respond with Basic Auth Challenge when Authorization credentials are incorrect (113ms)
        ✓ should respond with "403 Forbidden" when customer credentials are received (116ms)
        ✓ should respond with "406 Not Acceptable" when Accept header is missing (113ms)
        ✓ should respond with "406 Not Acceptable" when client does not accept JSON (116ms)
        ✓ should respond with JSON when admin credentials are received (115ms)
        ✓ should respond with status code 404 when user does not exist (113ms)
      Updating users: PUT /api/users/{id}
        ✓ should respond with "401 Unauthorized" when Authorization header is missing
        ✓ should respond with Basic Auth Challenge when Authorization header is missing
        ✓ should respond with Basic Auth Challenge when Authorization credentials are incorrect (113ms)
        ✓ should respond with "403 Forbidden" when customer credentials are received (113ms)
        ✓ should respond with "406 Not Acceptable" when Accept header is missing (128ms)
        ✓ should respond with "406 Not Acceptable" when client does not accept JSON (119ms)
        ✓ should update role when admin credentials are received (123ms)
        ✓ should only update role (124ms)
        ✓ should respond with "400 Bad Request" when role is missing (114ms)
        ✓ should respond with "400 Bad Request" when role is not valid (115ms)
        ✓ should respond with status code 404 when user does not exist (114ms)
      Deleting users: DELETE /api/users/{id}
        ✓ should respond with "401 Unauthorized" when Authorization header is missing
        ✓ should respond with Basic Auth Challenge when Authorization header is missing
        ✓ should respond with Basic Auth Challenge when Authorization credentials are incorrect (113ms)
        ✓ should respond with "403 Forbidden" when customer credentials are received (115ms)
        ✓ should respond with "406 Not Acceptable" when Accept header is missing (114ms)
        ✓ should respond with "406 Not Acceptable" when client does not accept JSON (117ms)
        ✓ should delete user when admin credentials are received (122ms)
        ✓ should return the deleted user (120ms)
        ✓ should respond with status code 404 when user does not exist (132ms)
      Viewing all products: GET /api/products
        ✓ should respond with "401 Unauthorized" when Authorization header is missing
        ✓ should respond with Basic Auth Challenge when Authorization header is missing
        ✓ should respond with Basic Auth Challenge when Authorization credentials are incorrect (113ms)
        ✓ should respond with Basic Auth Challenge when Authorization header is empty
        ✓ should respond with Basic Auth Challenge when Authorization header is not properly encoded
        ✓ should respond with "406 Not Acceptable" when Accept header is missing
        ✓ should respond with "406 Not Acceptable" when client does not accept JSON
        ✓ should respond with JSON when admin credentials are received (116ms)
        ✓ should respond with JSON when customer credentials are received (149ms)
        ✓ should respond with correct data when admin credentials are received (117ms)
        ✓ should respond with correct data when customer credentials are received (120ms)
      Viewing a single product: GET /api/products/{id}
        ✓ should respond with "401 Unauthorized" when Authorization header is missing
        ✓ should respond with Basic Auth Challenge when Authorization header is missing
        ✓ should respond with Basic Auth Challenge when Authorization credentials are incorrect (124ms)
        ✓ should respond with "406 Not Acceptable" when Accept header is missing (114ms)
        ✓ should respond with "406 Not Acceptable" when client does not accept JSON (113ms)
        ✓ should respond with JSON when admin credentials are received (117ms)
        ✓ should respond with JSON when customer credentials are received (116ms)
        ✓ should respond with status code 404 when product does not exist (123ms)
      Updating products: PUT /api/products/{id}
        ✓ should respond with "401 Unauthorized" when Authorization header is missing
        ✓ should respond with Basic Auth Challenge when Authorization header is missing
        ✓ should respond with Basic Auth Challenge when Authorization credentials are incorrect (114ms)
        ✓ should respond with "403 Forbidden" when customer credentials are received (114ms)
        ✓ should respond with "406 Not Acceptable" when Accept header is missing (182ms)
        ✓ should respond with "406 Not Acceptable" when client does not accept JSON (113ms)
        ✓ should update product when admin credentials are received (126ms)
        ✓ should allow partial update of product properties (116ms)
        ✓ should respond with "400 Bad Request" when name is empty (115ms)
        ✓ should respond with "400 Bad Request" when price is not a number (129ms)
        ✓ should respond with "400 Bad Request" when price is 0 (zero) (114ms)
        ✓ should respond with "400 Bad Request" when price is negative (115ms)
        ✓ should respond with status code 404 when product does not exist (116ms)
      Deleting products: DELETE /api/products/{id}
        ✓ should respond with "401 Unauthorized" when Authorization header is missing
        ✓ should respond with Basic Auth Challenge when Authorization header is missing
        ✓ should respond with Basic Auth Challenge when Authorization credentials are incorrect (114ms)
        ✓ should respond with "403 Forbidden" when customer credentials are received (114ms)
        ✓ should respond with "406 Not Acceptable" when Accept header is missing (115ms)
        ✓ should respond with "406 Not Acceptable" when client does not accept JSON (113ms)
        ✓ should delete product when admin credentials are received (116ms)
        ✓ should return the deleted user (120ms)
        ✓ should respond with status code 404 when user does not exist (115ms)
      Create a new product: POST /api/products
        ✓ should respond with "406 Not Acceptable" when Accept header is missing
        ✓ should respond with "406 Not Acceptable" when client does not accept JSON
        ✓ should respond with "401 Unauthorized" when Authorization header is missing
        ✓ should respond with Basic Auth Challenge when Authorization header is missing
        ✓ should respond with Basic Auth Challenge when Authorization credentials are incorrect (114ms)
        ✓ should respond with "403 Forbidden" when customer credentials are received (113ms)
        ✓ should respond with "400 Bad Request" when request body is not valid JSON (114ms)
        ✓ should respond with "400 Bad Request" when name is missing (113ms)
        ✓ should respond with "400 Bad Request" when price is missing (113ms)
        ✓ should respond with "201 Created" when product creation is successful (115ms)
      Viewing all orders: GET /api/orders
        ✓ should respond with "401 Unauthorized" when Authorization header is missing
        ✓ should respond with Basic Auth Challenge when Authorization header is missing
        ✓ should respond with Basic Auth Challenge when Authorization credentials are incorrect (125ms)
        ✓ should respond with Basic Auth Challenge when Authorization header is empty
        ✓ should respond with Basic Auth Challenge when Authorization header is not properly encoded
        ✓ should respond with "406 Not Acceptable" when Accept header is missing
        ✓ should respond with "406 Not Acceptable" when client does not accept JSON
        ✓ should respond with JSON when admin credentials are received (113ms)
        ✓ should respond with JSON when customer credentials are received (134ms)
        ✓ should respond with correct data when admin credentials are received (117ms)
        ✓ should respond with correct data when customer credentials are received (114ms)
      Viewing a single order: GET /api/orders/{id}
        ✓ should respond with "401 Unauthorized" when Authorization header is missing
        ✓ should respond with Basic Auth Challenge when Authorization header is missing
        ✓ should respond with Basic Auth Challenge when Authorization credentials are incorrect (112ms)
        ✓ should respond with "406 Not Acceptable" when Accept header is missing (113ms)
        ✓ should respond with "406 Not Acceptable" when client does not accept JSON (114ms)
        ✓ should respond with JSON when admin credentials are received (115ms)
        ✓ should respond with JSON when customer credentials are received (115ms)
        ✓ should respond with status code 404 when order does not exist (114ms)
        ✓ should respond with status code 404 when order exists but the owner is not the current customer (114ms)
      Create a new order: POST /api/orders
        ✓ should respond with "406 Not Acceptable" when Accept header is missing
        ✓ should respond with "406 Not Acceptable" when client does not accept JSON
        ✓ should respond with "401 Unauthorized" when Authorization header is missing
        ✓ should respond with Basic Auth Challenge when Authorization header is missing
        ✓ should respond with Basic Auth Challenge when Authorization credentials are incorrect (113ms)
        ✓ should respond with "403 Forbidden" when admin credentials are received (112ms)
        ✓ should respond with "400 Bad Request" when request body is not valid JSON (112ms)
        ✓ should respond with "400 Bad Request" when items is empty (113ms)
        ✓ should respond with "400 Bad Request" when quantity is missing (114ms)
        ✓ should respond with "400 Bad Request" when product is missing (156ms)
        ✓ should respond with "400 Bad Request" when product _id is missing (115ms)
        ✓ should respond with "400 Bad Request" when product name is missing (112ms)
        ✓ should respond with "400 Bad Request" when price is missing (113ms)
        ✓ should respond with "201 Created" when order creation is successful (116ms)

  User Inteface
    2) "before all" hook in "User Inteface"

  Request Utils
    3) "before all" hook in "User Inteface"
    acceptsJson()
      ✓ should return false when "Accept" header is missing
      ✓ should return false when "Accept" header does not include "application/json" or "*/*"
      ✓ should return true when "Accept" header includes "application/json"
      ✓ should return true when "Accept" header includes "*/*"
    getCredentials()
      ✓ should return null when "Authorization" header is missing
      ✓ should return null when "Authorization" header is empty
      ✓ should return null when "Authorization" type is not "Basic"
      ✓ should return Array when "Authorization" type is "Basic"
      ✓ should return parsed credentials in an Array when "Authorization" header is correct
    isJson()
      ✓ should return false when "Content-Type" header is missing
      ✓ should return false when "Content-Type" header is empty
      ✓ should return false when "Content-Type" is not "application/json
      ✓ should return true when "Content-Type" is "application/json

  Response Utils
    basicAuthChallenge()
      ✓ should set response status to 401
      ✓ should set response header "WWW-Authenticate" to "Basic"
    sendJson()
      ✓ should set response status to 200 by default
      ✓ should set response status to given value
      ✓ should set response Content-Type to "application/json"
    createdResource()
      ✓ should set response status to 201
      ✓ should set response Content-Type to "application/json"
    noContent()
      ✓ should set response status to 204
    badRequest()
      ✓ should set response status to 400
      ✓ should set response Content-Type to "application/json" when error message is supplied
    unauthorized()
      ✓ should set response status to 401
    forbidden()
      ✓ should set response status to 403
    notFound()
      ✓ should set response status to 404
    methodNotAllowed()
      ✓ should set response status to 405
    contentTypeNotAcceptable()
      ✓ should set response status to 406
    internalServerError()
      ✓ should set response status to 500


  224 passing (3m)
  3 failing

  1) .env
       must define DBURL:
     AssertionError: expected { Object (NVM_INC, MANPATH, ...) } to have property 'DBURL'
      at Context.<anonymous> (test/models/env.test.js:8:33)
      at processImmediate (node:internal/timers:466:21)

  2) User Inteface
       "before all" hook in "User Inteface":
     Uncaught Error: listen EADDRINUSE: address already in use :::3000
      at Server.setupListenHandle [as _listen2] (node:net:1463:16)
      at listenInCluster (node:net:1511:12)
      at Server.listen (node:net:1599:7)
      at Context.<anonymous> (test/ui.test.js:73:12)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  3) User Inteface
       "before all" hook in "User Inteface":
     done() called multiple times in hook <User Inteface "before all" hook in "User Inteface"> of file /Users/amyo/Documents/webdevgroup/webdev1-fall2023-group002/test/ui.test.js; in addition, done() received error: Error: Failed to launch the browser process! spawn /usr/bin/chromium-browser ENOENT


TROUBLESHOOTING: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md

    at onClose (/Users/amyo/Documents/webdevgroup/webdev1-fall2023-group002/node_modules/puppeteer/lib/cjs/puppeteer/node/BrowserRunner.js:193:20)
    at ChildProcess.<anonymous> (/Users/amyo/Documents/webdevgroup/webdev1-fall2023-group002/node_modules/puppeteer/lib/cjs/puppeteer/node/BrowserRunner.js:185:85)
    at ChildProcess.emit (node:events:513:28)
    at Process.ChildProcess._handle.onexit (node:internal/child_process:291:12)
    at onErrorNT (node:internal/child_process:485:16)
    at processTicksAndRejections (node:internal/process/task_queues:83:21)
  Error: done() called multiple times in hook <User Inteface "before all" hook in "User Inteface"> of file /Users/amyo/Documents/webdevgroup/webdev1-fall2023-group002/test/ui.test.js; in addition, done() received error: Error: Failed to launch the browser process! spawn /usr/bin/chromium-browser ENOENT
  
  
  TROUBLESHOOTING: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md
  
      at onClose (node_modules/puppeteer/lib/cjs/puppeteer/node/BrowserRunner.js:193:20)
      at ChildProcess.<anonymous> (node_modules/puppeteer/lib/cjs/puppeteer/node/BrowserRunner.js:185:85)
      at ChildProcess.emit (node:events:513:28)
      at Process.ChildProcess._handle.onexit (node:internal/child_process:291:12)
      at onErrorNT (node:internal/child_process:485:16)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)



